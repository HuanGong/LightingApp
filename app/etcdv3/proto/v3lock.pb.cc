// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v3lock.proto

#include "v3lock.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseHeader_rpc_2eproto;
namespace v3lockpb {
class LockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockRequest> _instance;
} _LockRequest_default_instance_;
class LockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockResponse> _instance;
} _LockResponse_default_instance_;
class UnlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnlockRequest> _instance;
} _UnlockRequest_default_instance_;
class UnlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnlockResponse> _instance;
} _UnlockResponse_default_instance_;
}  // namespace v3lockpb
static void InitDefaultsscc_info_LockRequest_v3lock_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v3lockpb::_LockRequest_default_instance_;
    new (ptr) ::v3lockpb::LockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3lockpb::LockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockRequest_v3lock_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockRequest_v3lock_2eproto}, {}};

static void InitDefaultsscc_info_LockResponse_v3lock_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v3lockpb::_LockResponse_default_instance_;
    new (ptr) ::v3lockpb::LockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3lockpb::LockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LockResponse_v3lock_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LockResponse_v3lock_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_UnlockRequest_v3lock_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v3lockpb::_UnlockRequest_default_instance_;
    new (ptr) ::v3lockpb::UnlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3lockpb::UnlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnlockRequest_v3lock_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnlockRequest_v3lock_2eproto}, {}};

static void InitDefaultsscc_info_UnlockResponse_v3lock_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v3lockpb::_UnlockResponse_default_instance_;
    new (ptr) ::v3lockpb::UnlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3lockpb::UnlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnlockResponse_v3lock_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnlockResponse_v3lock_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_v3lock_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_v3lock_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_v3lock_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_v3lock_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v3lockpb::LockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v3lockpb::LockRequest, name_),
  PROTOBUF_FIELD_OFFSET(::v3lockpb::LockRequest, lease_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v3lockpb::LockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v3lockpb::LockResponse, header_),
  PROTOBUF_FIELD_OFFSET(::v3lockpb::LockResponse, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v3lockpb::UnlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v3lockpb::UnlockRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v3lockpb::UnlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v3lockpb::UnlockResponse, header_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v3lockpb::LockRequest)},
  { 7, -1, sizeof(::v3lockpb::LockResponse)},
  { 14, -1, sizeof(::v3lockpb::UnlockRequest)},
  { 20, -1, sizeof(::v3lockpb::UnlockResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v3lockpb::_LockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v3lockpb::_LockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v3lockpb::_UnlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v3lockpb::_UnlockResponse_default_instance_),
};

const char descriptor_table_protodef_v3lock_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014v3lock.proto\022\010v3lockpb\032\trpc.proto\"*\n\013L"
  "ockRequest\022\014\n\004name\030\001 \001(\014\022\r\n\005lease\030\002 \001(\003\""
  "I\n\014LockResponse\022,\n\006header\030\001 \001(\0132\034.etcdse"
  "rverpb.ResponseHeader\022\013\n\003key\030\002 \001(\014\"\034\n\rUn"
  "lockRequest\022\013\n\003key\030\001 \001(\014\">\n\016UnlockRespon"
  "se\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Respon"
  "seHeader2~\n\004Lock\0227\n\004Lock\022\025.v3lockpb.Lock"
  "Request\032\026.v3lockpb.LockResponse\"\000\022=\n\006Unl"
  "ock\022\027.v3lockpb.UnlockRequest\032\030.v3lockpb."
  "UnlockResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_v3lock_2eproto_deps[1] = {
  &::descriptor_table_rpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_v3lock_2eproto_sccs[4] = {
  &scc_info_LockRequest_v3lock_2eproto.base,
  &scc_info_LockResponse_v3lock_2eproto.base,
  &scc_info_UnlockRequest_v3lock_2eproto.base,
  &scc_info_UnlockResponse_v3lock_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_v3lock_2eproto_once;
static bool descriptor_table_v3lock_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v3lock_2eproto = {
  &descriptor_table_v3lock_2eproto_initialized, descriptor_table_protodef_v3lock_2eproto, "v3lock.proto", 384,
  &descriptor_table_v3lock_2eproto_once, descriptor_table_v3lock_2eproto_sccs, descriptor_table_v3lock_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_v3lock_2eproto::offsets,
  file_level_metadata_v3lock_2eproto, 4, file_level_enum_descriptors_v3lock_2eproto, file_level_service_descriptors_v3lock_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_v3lock_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_v3lock_2eproto), true);
namespace v3lockpb {

// ===================================================================

void LockRequest::InitAsDefaultInstance() {
}
class LockRequest::_Internal {
 public:
};

LockRequest::LockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3lockpb.LockRequest)
}
LockRequest::LockRequest(const LockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  lease_ = from.lease_;
  // @@protoc_insertion_point(copy_constructor:v3lockpb.LockRequest)
}

void LockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LockRequest_v3lock_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lease_ = PROTOBUF_LONGLONG(0);
}

LockRequest::~LockRequest() {
  // @@protoc_insertion_point(destructor:v3lockpb.LockRequest)
  SharedDtor();
}

void LockRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockRequest& LockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockRequest_v3lock_2eproto.base);
  return *internal_default_instance();
}


void LockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v3lockpb.LockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lease_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* LockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lease = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lease_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v3lockpb.LockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 lease = 2;
  if (this->lease() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_lease(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3lockpb.LockRequest)
  return target;
}

size_t LockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3lockpb.LockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int64 lease = 2;
  if (this->lease() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lease());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3lockpb.LockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3lockpb.LockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3lockpb.LockRequest)
    MergeFrom(*source);
  }
}

void LockRequest::MergeFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3lockpb.LockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.lease() != 0) {
    _internal_set_lease(from._internal_lease());
  }
}

void LockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3lockpb.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockRequest::CopyFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3lockpb.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockRequest::IsInitialized() const {
  return true;
}

void LockRequest::InternalSwap(LockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lease_, other->lease_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LockResponse::InitAsDefaultInstance() {
  ::v3lockpb::_LockResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class LockResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const LockResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
LockResponse::_Internal::header(const LockResponse* msg) {
  return *msg->header_;
}
void LockResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
LockResponse::LockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3lockpb.LockResponse)
}
LockResponse::LockResponse(const LockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v3lockpb.LockResponse)
}

void LockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LockResponse_v3lock_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

LockResponse::~LockResponse() {
  // @@protoc_insertion_point(destructor:v3lockpb.LockResponse)
  SharedDtor();
}

void LockResponse::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void LockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockResponse& LockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockResponse_v3lock_2eproto.base);
  return *internal_default_instance();
}


void LockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v3lockpb.LockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v3lockpb.LockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3lockpb.LockResponse)
  return target;
}

size_t LockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3lockpb.LockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3lockpb.LockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3lockpb.LockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3lockpb.LockResponse)
    MergeFrom(*source);
  }
}

void LockResponse::MergeFrom(const LockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3lockpb.LockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void LockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3lockpb.LockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockResponse::CopyFrom(const LockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3lockpb.LockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockResponse::IsInitialized() const {
  return true;
}

void LockResponse::InternalSwap(LockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnlockRequest::InitAsDefaultInstance() {
}
class UnlockRequest::_Internal {
 public:
};

UnlockRequest::UnlockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3lockpb.UnlockRequest)
}
UnlockRequest::UnlockRequest(const UnlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:v3lockpb.UnlockRequest)
}

void UnlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnlockRequest_v3lock_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnlockRequest::~UnlockRequest() {
  // @@protoc_insertion_point(destructor:v3lockpb.UnlockRequest)
  SharedDtor();
}

void UnlockRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnlockRequest& UnlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnlockRequest_v3lock_2eproto.base);
  return *internal_default_instance();
}


void UnlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v3lockpb.UnlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UnlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v3lockpb.UnlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3lockpb.UnlockRequest)
  return target;
}

size_t UnlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3lockpb.UnlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3lockpb.UnlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3lockpb.UnlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3lockpb.UnlockRequest)
    MergeFrom(*source);
  }
}

void UnlockRequest::MergeFrom(const UnlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3lockpb.UnlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void UnlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3lockpb.UnlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockRequest::CopyFrom(const UnlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3lockpb.UnlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockRequest::IsInitialized() const {
  return true;
}

void UnlockRequest::InternalSwap(UnlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnlockResponse::InitAsDefaultInstance() {
  ::v3lockpb::_UnlockResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class UnlockResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const UnlockResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
UnlockResponse::_Internal::header(const UnlockResponse* msg) {
  return *msg->header_;
}
void UnlockResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
UnlockResponse::UnlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3lockpb.UnlockResponse)
}
UnlockResponse::UnlockResponse(const UnlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v3lockpb.UnlockResponse)
}

void UnlockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnlockResponse_v3lock_2eproto.base);
  header_ = nullptr;
}

UnlockResponse::~UnlockResponse() {
  // @@protoc_insertion_point(destructor:v3lockpb.UnlockResponse)
  SharedDtor();
}

void UnlockResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void UnlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnlockResponse& UnlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnlockResponse_v3lock_2eproto.base);
  return *internal_default_instance();
}


void UnlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v3lockpb.UnlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* UnlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v3lockpb.UnlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3lockpb.UnlockResponse)
  return target;
}

size_t UnlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3lockpb.UnlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3lockpb.UnlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3lockpb.UnlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3lockpb.UnlockResponse)
    MergeFrom(*source);
  }
}

void UnlockResponse::MergeFrom(const UnlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3lockpb.UnlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void UnlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3lockpb.UnlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockResponse::CopyFrom(const UnlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3lockpb.UnlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockResponse::IsInitialized() const {
  return true;
}

void UnlockResponse::InternalSwap(UnlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v3lockpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v3lockpb::LockRequest* Arena::CreateMaybeMessage< ::v3lockpb::LockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::v3lockpb::LockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v3lockpb::LockResponse* Arena::CreateMaybeMessage< ::v3lockpb::LockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::v3lockpb::LockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v3lockpb::UnlockRequest* Arena::CreateMaybeMessage< ::v3lockpb::UnlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::v3lockpb::UnlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v3lockpb::UnlockResponse* Arena::CreateMaybeMessage< ::v3lockpb::UnlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::v3lockpb::UnlockResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
